// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String   @id
  displayName String
  avatarUrl   String?
  email       String   @unique
  biography   String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  socials        Socials[]
  asks           Ask[]
  offers         Offer[]
  favoriteAsks   FavoriteAsk[]
  favoriteOffers FavoriteOffer[]
  comments       AskOfferComment[]
}

model Ask {
  id          String            @id @default(uuid())
  title       String
  description String            @default("")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  isDeleted   Boolean           @default(false)
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  favoritedBy FavoriteAsk[]
  comments    AskOfferComment[]
}

model Offer {
  id          String            @id @default(uuid())
  title       String
  description String            @default("")
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  isDeleted   Boolean           @default(false)
  user        User              @relation(fields: [userId], references: [id])
  userId      String
  favoritedBy FavoriteOffer[]
  comments    AskOfferComment[]
}

model Socials {
  id    String @id @default(uuid())
  name  String
  value String

  //relations
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model FavoriteAsk {
  userId String
  askId  String

  //relations
  user User @relation(fields: [userId], references: [id])
  ask  Ask  @relation(fields: [askId], references: [id], onDelete: Cascade)

  @@id([userId, askId])
}

model FavoriteOffer {
  userId  String
  offerId String

  //relations
  user  User  @relation(fields: [userId], references: [id])
  offer Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)

  @@id([userId, offerId])
}

model AskOfferComment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  //relations
  user    User    @relation(fields: [userId], references: [id])
  userId  String
  ask     Ask?    @relation(fields: [askId], references: [id], onDelete: Cascade)
  askId   String?
  offer   Offer?  @relation(fields: [offerId], references: [id], onDelete: Cascade)
  offerId String?

  //1-1 self relation for nested comments
  comment   AskOfferComment?  @relation("NestedComment", fields: [commentId], references: [id])
  commentId String?
  replies   AskOfferComment[] @relation("NestedComment")
}
